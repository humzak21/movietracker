name: Deploy Full-Stack Movie Tracker to cPanel

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ closed ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    # Only run on direct pushes to main OR when a PR merged to main
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install frontend dependencies
      run: npm ci
      
    - name: Build React application
      run: npm run build
      
    - name: Install backend dependencies
      run: |
        cd backend
        npm ci --only=production
        cd ..
      
    - name: Prepare full-stack deployment files
      run: |
        echo "Preparing full-stack deployment files..."
        
        # Create deployment directory
        rm -rf deployment
        mkdir -p deployment
        
        # Copy built frontend files from dist
        echo "Copying frontend build files..."
        cp -r dist/* deployment/
        
        # Copy backend files
        echo "Copying backend files..."
        mkdir -p deployment/backend
        cp -r backend/* deployment/backend/
        
        # Clean up backend files
        echo "Cleaning backend files..."
        rm -rf deployment/backend/node_modules
        rm -f deployment/backend/.env
        rm -f deployment/backend/nodemon.json
        rm -rf deployment/backend/.git*
        
        # Copy configuration files
        echo "Copying configuration files..."
        cp .htaccess deployment/ 2>/dev/null || echo "Creating .htaccess"
        
        # Create frontend .htaccess if it doesn't exist
        if [ ! -f "deployment/.htaccess" ]; then
          cat > deployment/.htaccess << 'EOF'
        # Movie Tracker Frontend Configuration
        RewriteEngine On
        
        # Handle React Router (redirect all requests to index.html)
        RewriteCond %{REQUEST_FILENAME} !-f
        RewriteCond %{REQUEST_FILENAME} !-d
        RewriteCond %{REQUEST_URI} !^/backend
        RewriteRule . /index.html [L]
        
        # Security headers
        Header always set X-Content-Type-Options nosniff
        Header always set X-Frame-Options DENY
        Header always set X-XSS-Protection "1; mode=block"
        
        # Cache static assets
        <filesMatch "\.(css|js|png|jpg|jpeg|gif|svg|ico|woff|woff2|ttf|eot)$">
            ExpiresActive On
            ExpiresDefault "access plus 1 month"
        </filesMatch>
        EOF
        fi
        
        # Note: Backend will load .env from /home/squareds (parent directory)
        echo "Backend configured to load .env from parent directory (/home/squareds)"
        
    - name: Create deployment archive
      run: |
        cd deployment
        tar -czf ../deployment.tar.gz .
        cd ..
        echo "Created deployment archive"
        
    - name: Deploy to cPanel via FTP
      uses: SamKirkland/FTP-Deploy-Action@v4.3.5
      with:
        server: ${{ secrets.CPANEL_FTP_SERVER }}
        username: ${{ secrets.CPANEL_FTP_USERNAME }}
        password: ${{ secrets.CPANEL_FTP_PASSWORD }}
        local-dir: ./deployment/
        server-dir: public_html/
        exclude: |
          **/.git*
          **/.git*/**
          **/node_modules/**
          **/.env*
          **/deployment.tar.gz
          **/nodemon.json
        
    - name: Verify deployment
      run: |
        echo "üéâ Full-stack deployment completed!"
        echo ""
        echo "üì¶ Deployed components:"
        echo "  ‚úÖ React frontend (built from dist/)"
        echo "  ‚úÖ Node.js backend API (backend/)"
        echo "  ‚úÖ Environment configuration (from GitHub secrets)"
        echo "  ‚úÖ Frontend routing (.htaccess)"
        echo "  ‚úÖ Backend API wrapper (PHP for shared hosting)"
        echo ""
        echo "üö® IMPORTANT: The following are NO LONGER DEPLOYED:"
        echo "  ‚ùå PHP api/ folder (deprecated)"
        echo "  ‚ùå CSV files (data should be in Supabase)"
        echo "  ‚ùå router.php (not needed)"
        echo ""
        echo "üîß Next steps for your server:"
        echo "1. Ensure Node.js v18+ is installed on your server"
        echo "2. In the backend/ directory: npm install"
        echo "3. Start the backend: npm start (or use PM2 for production)"
        echo "4. Configure reverse proxy if needed"
        echo ""
        echo "üß™ Testing your deployment:"
        echo "1. Visit your website - should show the React app"
        echo "2. Open browser console - check for API errors"
        echo "3. Test adding a movie to verify backend connection"
        echo "4. Check Supabase dashboard for new entries"
        echo ""
        echo "üìä Required GitHub Secrets:"
        echo "  - SUPABASE_URL"
        echo "  - SUPABASE_ANON_KEY" 
        echo "  - SUPABASE_SERVICE_ROLE_KEY"
        echo "  - TMDB_API_KEY"
        echo "  - FRONTEND_URL"
        echo "  - CPANEL_FTP_SERVER"
        echo "  - CPANEL_FTP_USERNAME"
        echo "  - CPANEL_FTP_PASSWORD"
        
    - name: Cleanup
      run: |
        rm -rf deployment
        rm -f deployment.tar.gz
        echo "Cleaned up temporary files"